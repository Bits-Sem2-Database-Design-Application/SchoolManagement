CREATE DATABASE SCHOOL_DB; 

USE  SCHOOL_DB;

CREATE TABLE COURSE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL UNIQUE,
    CODE VARCHAR(10) NOT NULL UNIQUE,
    CREDIT_UNIT INTEGER NOT NULL,
    PRIMARY KEY (ID) 
);

CREATE TABLE PROGRAM (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL UNIQUE,
    ABBREVIATION VARCHAR(10) NOT NULL UNIQUE,
    FEES BIGINT NOT NULL, 
    PRIMARY KEY (ID)
);

CREATE TABLE PROGRAM_COURSE (
    PROGRAM_ID BIGINT NOT NULL,
    COURSE_ID BIGINT NOT NULL,
    SEMESTER INTEGER NOT NULL,
    PRIMARY KEY (PROGRAM_ID, COURSE_ID),
    FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID)
);

CREATE TABLE PROGRAM_SEMESTER_FEES (
    PROGRAM_ID BIGINT NOT NULL,
    SEMESTER INTEGER NOT NULL,
    FEES BIGINT NOT NULL,
    COURSE_ID BIGINT,
    PRIMARY KEY (PROGRAM_ID, COURSE_ID),
    FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID)
);


CREATE TABLE STUDENT_APPLICATION (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    FIRST_NAME VARCHAR(30) NOT NULL,
    LAST_NAME VARCHAR(30) NOT NULL,
    BIRTHDATE DATE NOT NULL,
    GENDER VARCHAR(10) NOT NULL, 
    EMAIL VARCHAR(100) NOT NULL UNIQUE,
    APPLICATION_DATE  DATE NOT NULL,
    SUPPORTING_DOCS_AS_SINGLE_PDF MEDIUMBLOB NOT NULL,
    STATUS VARCHAR(20),
	COMMENTS VARCHAR(256),
	OTP INTEGER,
	PROGRAM_ID BIGINT NOT NULL,
    PRIMARY KEY (ID),
	FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAM(ID)
);

CREATE TABLE ADDRESS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    LINE_1 VARCHAR(50) NOT NULL,
    LINE_2 VARCHAR(50) NOT NULL,
    CITY VARCHAR(100) NOT NULL,
    STATE VARCHAR(100) NOT NULL,
    COUNTRY VARCHAR(100) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE STUDENT_ADDRESS (
    STUDENT_ID BIGINT NOT NULL,
    ADDRESS_ID BIGINT NOT NULL,
    ADDRESS_TYPE VARCHAR(15) NOT NULL,
    PRIMARY KEY (STUDENT_ID, ADDRESS_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT_APPLICATION(ID),
    FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ID)
);

CREATE TABLE CONTACT (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    COUNTRY_CODE INT NOT NULL,
    CONTACT_NUMBER BIGINT NOT NULL,
    CONTACT_TYPE VARCHAR(10),
    PRIMARY KEY (ID)
);

CREATE TABLE STUDENT_CONTACT (
    STUDENT_ID BIGINT NOT NULL,
    CONTACT_ID BIGINT NOT NULL,
    CONTACT_TYPE VARCHAR(15) NOT NULL,
    PRIMARY KEY (STUDENT_ID, CONTACT_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT_APPLICATION(ID),
    FOREIGN KEY (CONTACT_ID) REFERENCES CONTACT(ID)
);

CREATE TABLE USER_ACCOUNT (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    USERNAME VARCHAR(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR(15) NOT NULL,
    ROLE VARCHAR(10) NOT NULL,
    LAST_LOGGED_IN DATE,
    PRIMARY KEY (ID)
);

CREATE TABLE STUDENT (
    ID BIGINT NOT NULL UNIQUE,
    REGISTRATION_NUMBER VARCHAR(15) UNIQUE,
    ENROLLMENT_DATE DATE NOT NULL,
    CURRENT_SEMISTER INTEGER NOT NULL,
    PROGRAM_FEES BIGINT NOT NULL,
    USER_ID BIGINT, 
    FOREIGN KEY (ID) REFERENCES STUDENT_APPLICATION(ID),
    FOREIGN KEY (USER_ID) REFERENCES USER_ACCOUNT(ID),
    PRIMARY KEY (ID)
);

CREATE TABLE CHANGE_REQUEST (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STUDENT_ID BIGINT NOT NULL,
    CHANGE_REQUEST_TYPE VARCHAR(10) NOT NULL,
    CHANGE_REQUEST_DATE DATE NOT NULL,
    STUDENT_REMARKS VARCHAR(512) NOT NULL,
    ADMIN_REMARKS VARCHAR(512) NOT NULL,
    STATUS VARCHAR (10) NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID)
);

CREATE TABLE MARKS_TYPE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(15) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE MARKS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STUDENT_ID BIGINT NOT NULL,
    COURSE_ID BIGINT NOT NULL,
    MARKS_TYPE_ID BIGINT NOT NULL,
    SCORE INTEGER NOT NULL,
    SCORE_OUT_OF INTEGER NOT NULL,
    STATUS VARCHAR(10) NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID),
    FOREIGN KEY (MARKS_TYPE_ID) REFERENCES MARKS_TYPE(ID)
);

CREATE TABLE FEES_TYPE (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(15) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE FEES (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    STUDENT_ID BIGINT NOT NULL,
    FEES_TYPE_ID BIGINT NOT NULL,
    BANK VARCHAR(50) NOT NULL,
    TRANSACTION_DATE DATE NOT NULL,
    MODE VARCHAR(15) NOT NULL,
    REFERENCE_NUMBER VARCHAR(30) NOT NULL UNIQUE,
    TRANSACTION_AMOUNT  BIGINT NOT NULL,
    SEMESTER INTEGER NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
    FOREIGN KEY (FEES_TYPE_ID) REFERENCES FEES_TYPE(ID)
);

CREATE TABLE EXAM_FEES (
    FEES_ID BIGINT NOT NULL,
    COURSE_ID BIGINT NOT NULL,
    EXAM_FEES_AMOUNT BIGINT NOT NULL,
    PRIMARY KEY (FEES_ID, COURSE_ID),
    FOREIGN KEY (FEES_ID) REFERENCES FEES (ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE (ID)
);

INSERT INTO user_account(username, password, role, last_logged_in) values('admin', 'admin@123', 'admin', '2023-04-20');

INSERT INTO program (name, abbreviation, fees) VALUES ('MTECH Software Engineering', 'MTECH SE', 60000);
INSERT INTO program (name, abbreviation, fees) VALUES ('MTECH Data Science', 'MTECH DS', 62000);
INSERT INTO program (name, abbreviation, fees) VALUES ('MTECH Software System', 'MTECH SS', 64000);
INSERT INTO program (name, abbreviation, fees) VALUES ('MTECH Cloud Computing', 'MTECH CC', 65000);

INSERT INTO fees_type(name) VALUES('SEMESTER');
INSERT INTO fees_type(name) VALUES('EXAM');